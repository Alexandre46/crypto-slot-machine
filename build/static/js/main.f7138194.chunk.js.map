{"version":3,"sources":["components/fetchCryptoData.js","components/CryptoGrid.js","App.js","reportWebVitals.js","index.js"],"names":["defaultOptions","loop","autoplay","animationData","loadData","rendererSettings","preserveAspectRatio","FetchCryptoData","useState","cData","setcData","cSelectedName","setcSelectedName","cSelectedLogo","setcSelectedLogo","useQuery","a","fetch","then","resp","json","result","dataConverted","Object","keys","cryptoData","data","map","key","Number","catch","error","Alert","console","log","staleTime","isLoading","className","options","height","width","count","duration","message","Container","Row","Col","Button","onClick","min","max","random","Math","ceil","floor","selectedCryptoName","selectedCryptoLogo","find","crypto","index","name","toString","id","cryptoElements","document","querySelectorAll","animate","scale","finished","alt","src","style","overflow","textOverflow","str","symbol","length","substring","queryClient","QueryClient","CryptoGrid","QueryClientProvider","client","initialIsOpen","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f7138194.chunk.js","sourcesContent":["import { Alert, Col, Container, Row } from \"react-bootstrap\";\r\nimport {\r\n    useQuery\r\n  } from \"react-query\";\r\nimport Lottie from \"react-lottie\";\r\nimport * as loadData from \"../assets/loading.json\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from \"@restart/ui/esm/Button\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { animate } from \"motion\";\r\n\r\n//Lottie configs\r\nconst defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: loadData.default,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\"\r\n    }\r\n  };\r\n\r\nconst FetchCryptoData = () => {\r\n    const [cData, setcData] = useState([]);\r\n    const [cSelectedName, setcSelectedName] = useState('Por favor clique em gerar');\r\n    const [cSelectedLogo, setcSelectedLogo] = useState('https://images.discordapp.net/avatars/775806429541695498/0aff12d62dbc759c950751ba0f446f27.png?size=128');\r\n\r\n    const { isLoading, error, data } = useQuery('repoData', async () =>\r\n        await fetch('/api/coinmarketcap/cryptocurrency')\r\n            .then(resp => resp.json())\r\n            .then(result => {\r\n                const dataConverted = Object.keys(result.cryptoData.data).map((key) => [Number(key), result.cryptoData.data[key]]);\r\n                setcData(dataConverted);\r\n                return cData;\r\n            })\r\n            .catch(error => {\r\n                Alert(error);\r\n                console.log(error);\r\n            }), \r\n        {\r\n            staleTime: 3600000, // only eligible to refetch after 3600 seconds ~60min\r\n        }\r\n    )\r\n    \r\n    \r\n  \r\n    if (isLoading) return (\r\n        <div className=\"row\">\r\n            <div className=\"col-12 text-center\">\r\n                <h1> Carregando as criptomoedas ... Aguarde por favor! </h1>\r\n                <Lottie options={defaultOptions} height={200} width={200}/>\r\n                <Skeleton count={10} duration={2} /> \r\n            </div>\r\n            </div>\r\n    )\r\n  \r\n    if (error) return 'An error has occurred: ' + error.message\r\n\r\n    function getRandomIntInclusive(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      }\r\n\r\n    function truncate(str) {\r\n        return str.length > 10 ? str.substring(0, 7) + \"...\" : str;\r\n    }\r\n\r\n    function randomPicker() {\r\n        const random = getRandomIntInclusive(0,49);\r\n        let selectedCryptoName = null;\r\n        let selectedCryptoLogo = null;\r\n        let selectedCryptoId = null;\r\n        \r\n        cData.find((crypto,index) => {\r\n            if (index === random) {\r\n                selectedCryptoName = crypto[1].name.toString();\r\n                selectedCryptoLogo = `https://s2.coinmarketcap.com/static/img/coins/64x64/${crypto[1].id}.png`;\r\n                selectedCryptoId = crypto[1].id;\r\n                return [selectedCryptoName, selectedCryptoLogo];\r\n            }\r\n        })\r\n        console.log('random picked name ->', selectedCryptoName);\r\n        console.log('random picked img ->', selectedCryptoLogo);\r\n\r\n        setcSelectedName(selectedCryptoName);\r\n        setcSelectedLogo(selectedCryptoLogo);\r\n\r\n        const cryptoElements = document.querySelectorAll('.crypto-element');\r\n        \r\n        animate(\r\n            cryptoElements,\r\n            { scale: 1.5 },\r\n            { duration: 5 }\r\n        ).finished.then( () => {\r\n            animate(\r\n                cryptoElements,\r\n                { scale: 1.0 },\r\n                { duration: 3 })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container className=\"d-flex h-100 crypto-grid\">\r\n            <Row className=\"row justify-content-center align-self-center my-auto mx-auto\">\r\n                <Col className=\"col-12 col-lg-6 my-2 py-auto mx-auto col\">\r\n                    <Button className=\"btn-primary btn-lg\" onClick={randomPicker}> Sortear </Button>\r\n                </Col>\r\n                <Col className=\"col-12 col-lg-6 my-2 py-auto mx-auto col\">\r\n                    <span className=\"crypto-selected\">\r\n                        <img \r\n                                className=\"img-thumbnail border-0 rounded-circle crypto-logo\"\r\n                                alt=\"crypto selected\"\r\n                                src={cSelectedLogo} \r\n                            />\r\n                        <b>{cSelectedName ?? ''}</b>\r\n                    </span>\r\n                </Col>\r\n                { cData.map((crypto, index) => {\r\n                    return (\r\n                        <Col className={ crypto[1].name == cSelectedName ? 'crypto-element col-4 col-sm-3 col-md-2 col-lg-1 p-4 border border-danger' : 'crypto-element col-4 col-sm-3 col-md-2 col-lg-1 p-4'} id={crypto[1].id} key={crypto[1].id}> \r\n                            <p className=\"text-black mb-0\" style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\r\n                                { truncate(crypto[1].symbol) } \r\n                            </p>\r\n                            <img \r\n                                className=\"img-thumbnail border-0 rounded-circle crypto-logo\"\r\n                                alt=\"crypto img - crypto-slot-machine\"\r\n                                src={`https://s2.coinmarketcap.com/static/img/coins/64x64/${crypto[1].id}.png`} \r\n                            />\r\n                        </Col>  \r\n                    );\r\n                })}\r\n            </Row> \r\n        </Container>\r\n    )\r\n  }\r\n \r\n  export default FetchCryptoData;","import React  from 'react';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\nimport FetchCryptoData from './fetchCryptoData';\r\nimport { ReactQueryDevtools } from 'react-query/devtools'\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nconst CryptoGrid = () => {\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <FetchCryptoData />\r\n            <ReactQueryDevtools initialIsOpen={true} />         \r\n        </QueryClientProvider>\r\n    );\r\n}\r\n\r\nexport default CryptoGrid;\r\n","import { Suspense } from 'react';\r\nimport './App.css';\r\nimport CryptoGrid from './components/CryptoGrid';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<p>loading...</p>}>\r\n        <CryptoGrid />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}