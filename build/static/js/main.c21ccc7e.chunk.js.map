{"version":3,"sources":["components/fetchCryptoData.js","components/CryptoGrid.js","App.js","reportWebVitals.js","index.js"],"names":["defaultOptions","loop","autoplay","animationData","loadData","rendererSettings","preserveAspectRatio","FetchCryptoData","useState","cData","setcData","cSelectedName","setcSelectedName","cSelectedLogo","setcSelectedLogo","useQuery","a","fetch","then","resp","json","result","dataConverted","Object","keys","cryptoData","data","map","key","Number","catch","error","Alert","console","log","staleTime","isLoading","className","options","height","width","count","duration","message","Container","Row","Col","Button","onClick","min","max","random","Math","ceil","floor","selectedCryptoName","selectedCryptoLogo","find","crypto","index","name","toString","id","alt","src","style","overflow","textOverflow","str","symbol","length","substring","queryClient","QueryClient","CryptoGrid","QueryClientProvider","client","initialIsOpen","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c21ccc7e.chunk.js","sourcesContent":["import { Alert, Col, Container, Row } from \"react-bootstrap\";\nimport {\n    useQuery\n  } from \"react-query\";\nimport Lottie from \"react-lottie\";\nimport * as loadData from \"../assets/loading.json\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"@restart/ui/esm/Button\";\nimport Skeleton from \"react-loading-skeleton\";\n\n//Lottie configs\nconst defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: loadData.default,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n\nconst FetchCryptoData = () => {\n    const [cData, setcData] = useState([]);\n    const [cSelectedName, setcSelectedName] = useState('Por favor clique em gerar');\n    const [cSelectedLogo, setcSelectedLogo] = useState('https://images.discordapp.net/avatars/775806429541695498/0aff12d62dbc759c950751ba0f446f27.png?size=128');\n\n    const { isLoading, error, data } = useQuery('repoData', async () =>\n        await fetch('/api/coinmarketcap/cryptocurrency')\n            .then(resp => resp.json())\n            .then(result => {\n                const dataConverted = Object.keys(result.cryptoData.data).map((key) => [Number(key), result.cryptoData.data[key]]);\n                setcData(dataConverted);\n                return cData;\n            })\n            .catch(error => {\n                Alert(error);\n                console.log(error);\n            }), \n        {\n            staleTime: 3600000, // only eligible to refetch after 3600 seconds ~60min\n        }\n    )\n    \n    \n  \n    if (isLoading) return (\n        <div className=\"row\">\n            <div className=\"col-12 text-center\">\n                <h1> Carregando as criptomoedas ... Aguarde por favor! </h1>\n                <Lottie options={defaultOptions} height={200} width={200}/>\n                <Skeleton count={10} duration={2} /> \n            </div>\n            </div>\n    )\n  \n    if (error) return 'An error has occurred: ' + error.message\n\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n    function truncate(str) {\n        return str.length > 10 ? str.substring(0, 7) + \"...\" : str;\n    }\n\n    function randomPicker() {\n        const random = getRandomIntInclusive(0,49);\n        let selectedCryptoName = null;\n        let selectedCryptoLogo = null;\n\n        cData.find((crypto,index) => {\n            if (index === random) {\n                selectedCryptoName = crypto[1].name.toString();\n                selectedCryptoLogo = `https://s2.coinmarketcap.com/static/img/coins/64x64/${crypto[1].id}.png`\n                return [selectedCryptoName, selectedCryptoLogo];\n            }\n        })\n        console.log('random picked name ->', selectedCryptoName);\n        console.log('random picked img ->', selectedCryptoLogo);\n\n        setcSelectedName(selectedCryptoName);\n        setcSelectedLogo(selectedCryptoLogo);\n    }\n\n    return (\n        <Container className=\"d-flex h-100 crypto-grid\">\n            <Row className=\"row justify-content-center align-self-center my-auto mx-auto\">\n                <Col className=\"col-12 col-lg-6 my-2 py-auto mx-auto col\">\n                    <Button className=\"btn-primary btn-lg\" onClick={randomPicker}> QUAL COMPRAR ? </Button>\n                </Col>\n                <Col className=\"col-12 col-lg-6 my-2 py-auto mx-auto col\">\n                    <span className=\"crypto-selected\">\n                        <img \n                                className=\"img-thumbnail border-0 rounded-circle crypto-logo\"\n                                alt=\"crypto selected\"\n                                src={cSelectedLogo} \n                            />\n                        <b>{cSelectedName ?? ''}</b>\n                    </span>\n                </Col>\n                { cData.map((crypto, index) => {\n                    return (\n                        <Col className={ crypto[1].name == cSelectedName ? 'crypto-element col-4 col-sm-3 col-md-2 col-lg-1 p-4 border border-danger' : 'crypto-element col-4 col-sm-3 col-md-2 col-lg-1 p-4'} id={crypto[1].id} key={crypto[1].id}> \n                            <p className=\"text-black mb-0\" style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\n                                { truncate(crypto[1].symbol) } \n                            </p>\n                            <img \n                                className=\"img-thumbnail border-0 rounded-circle crypto-logo\"\n                                alt=\"crypto img - crypto-slot-machine\"\n                                src={`https://s2.coinmarketcap.com/static/img/coins/64x64/${crypto[1].id}.png`} \n                            />\n                        </Col>  \n                    );\n                })}\n            </Row> \n        </Container>\n    )\n  }\n \n  export default FetchCryptoData;","import React  from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport FetchCryptoData from './fetchCryptoData';\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst queryClient = new QueryClient();\n\nconst CryptoGrid = () => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <FetchCryptoData />\n            <ReactQueryDevtools initialIsOpen={true} />         \n        </QueryClientProvider>\n    );\n}\n\nexport default CryptoGrid;\n","import { Suspense } from 'react';\nimport './App.css';\nimport CryptoGrid from './components/CryptoGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<p>loading...</p>}>\n        <CryptoGrid />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}